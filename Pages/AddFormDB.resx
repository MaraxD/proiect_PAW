<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="errorProvider.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAUFBQBAgICmQAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wEBAdUGBgYWAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAgICQEB
        Ab4AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAADsAwMDLgAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEB
        AQ8AAADKAAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA8gQEBDgAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAADAwMOAAAAyQAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wEBAfIEBAQ4AAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAABwcHCwEBAcQAAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAADwAwMDNAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAgICAcBAQG5AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA6QMD
        AyoAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAANDQ0BAQEBngAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wEB
        AdgEBAQYAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAADAwMAAICAmgAAAD+AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8BAQGrCAgIBQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADAwMfAQEB0gAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAADyAgICTgQEBAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMDA0ABAQHHAAAA+QAAAP8AAAD/AAAA/wAA
        AP0BAQHfAQEBbAUFBQUTExMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwMDAAAAAAABwcHFgMDA00DAwN0AwMDggMD
        A3sDAwNbBQUFJjU1NQEEBAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEBAQAAYGBgABAQEAAAAAAAAA
        AAAAAAAAAAAAAAQEBAAKCgoAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAP////7//8A+//8ADv/+AAb//AAC//wAAgAAAAAAAAAAAAAAAAAAP8CAAAAAwAAAAPAA
        AAD8AAAC/4AAAv/gAAb/gAAO/4BAPv8AEP7/AA/+/gAP/v4AD/7+AA/+/gAP/v4AD/7+AA/+/gAP/v8A
        D/7/AB/+/4Af/v/AP/7////+
</value>
  </data>
</root>